@using MathGame.Web.Models.Quiz
@typeparam T where T : IComparable<T> 
@inject ISnackbar SnackBar


<MudPaper Elevation="4">
    <MudText Typo="Typo.h2"> @Game.QuizTitle</MudText>
    <MudText Typo="Typo.subtitle1"> @Game.QuizDescription</MudText>
    Kortteja: @Game.TotalQuestionsLeft / @Game.TotalQuestions

    Pelaajia: @Game.Players.Count
</MudPaper>

<MudTabs>

    @foreach (var player in Game.Players)
    {
        <MudTabPanel Text="@player.Name">
            <MudPaper Class="p-4">

                <MudPaper Class="mt-4 p-2">
                    @if (CurrentItem is not null)
                    {
                        <MudText Typo="Typo.h5"> Korttisi: @CurrentItem.text</MudText>
                    }
                    else
                    {
                        <MudButton Disabled="CurrentItem is not null" Variant="Variant.Filled" OnClick="DrawNext">Nosta kortti</MudButton>
                    }
                </MudPaper>
                <MudText Typo="Typo.h6" Class="mt-4">Pöydällä olevat kortit:</MudText>

                @if (player.Cards.Count == 0 && CurrentItem is null)
                {
                    <MudText>Ei vielä kortteja.</MudText>
                }
                else
                {
                    <MudList T="string">
                        <MudListItem T="string">
                            <MudButton
                                OnClick="() => SetHere(player, null, player.Cards.FirstOrDefault())"
                                Disabled="CurrentItem is null" Style="width: 100%; height: 100%;" Variant="Variant.Filled" Color="Color.Primary">
                                Aseta Tähän
                            </MudButton>
                        </MudListItem>
                        @if (player.Cards.Count > 0)
                        {
                            for (int i = 0; i < player.Cards.Count; i++)
                            {
                                var item = player.Cards[i];
                                var prev = i > 0 ? player.Cards[i] : null;
                                var next = i + 1 < player.Cards.Count ? player.Cards[i + 1] : null;
                                <MudListItem T="string">
                                    <MudStack Row>

                                        <MudText>@item.text</MudText>
                                        @if (Game.ShowValue)
                                        {
                                            <MudText Color="Color.Secondary" Class="ml-2">(Arvo: @item.value)</MudText>
                                        }
                                    </MudStack>
                                </MudListItem>
                                <MudListItem T="string">
                                    <MudButton
                                        OnClick="() => SetHere(player, prev, next)"
                                        Disabled="CurrentItem is null" Style="width: 100%; height: 100%;" Variant="Variant.Filled" Color="Color.Primary">
                                        Aseta Tähän
                                    </MudButton>
                                </MudListItem>
                            }
                        }
                    </MudList>
                }

            </MudPaper>


        </MudTabPanel>
    }

</MudTabs>

@code {
    [Parameter] public required QuizGame<T> Game { get; set; }


    private QuizItem<T>? CurrentItem;

    protected override Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            
            if (Game is null)
            {
                throw new ArgumentNullException(nameof(Game), "Game parameter must be set.");
            }

            if (Game.Players.Count == 0)
            {
                throw new InvalidOperationException("At least one player must be added to the game before starting.");
            }

            foreach (var gamePlayer in Game.Players)
            {
                if (gamePlayer.Cards.Count() == 0)
                {
                    // If player has no cards, draw a card for them
                    var item = Game.GetRandomQuestion();
                    if (item is not null)
                    {
                        gamePlayer.AddCard(item);
                        gamePlayer.SortCards();
                    }
                }
            }

        }
        return base.OnAfterRenderAsync(firstRender);
    }
    

    private void DrawNext()
    {
        CurrentItem = Game.GetRandomQuestion();
    }

    private Task SetHere(Player<T> player, QuizItem<T>? prev, QuizItem<T>? next)
    {

        if (CurrentItem is null)
        {
            return Task.CompletedTask;
        }
        var result = player.CheckOrderQuess(CurrentItem, prev, next);

        if (result)
        {
            player.AddCard(CurrentItem);
            player.SortCards();
        }
        else
        {
            SnackBar.Add($"Väärin! Kortti: {CurrentItem.text} (Arvo: {CurrentItem.value})", Severity.Error);
            player.AddFailedCard(CurrentItem);
        }

        CurrentItem = null;
        return Task.CompletedTask;
    }

}