@if (_activeRound == null)
{
    <MudGrid>
        @if (Game.Rounds.Count > 0)
        {
            var previousRound = Game.Rounds.Last();
            var prevAnswer = previousRound.IsCorrect ?? false ? "Oikein" : "Väärin";
            <MudItem>

                <MudText>Edellisen kierroksen vastaus oli @prevAnswer </MudText>
                <MudText>Vastaukseen kului aikaa: @(previousRound.TimeTaken?.TotalMilliseconds / 1000)</MudText>

                @if (previousRound.IsCorrect == false)
                {
                    <MudText>Edellisen kierroksen oikea summa oli @previousRound.TotalSum </MudText>
                    <MudText>Edellisen kierroksen vastaus oli @previousRound.Answer </MudText>
                }
            </MudItem>
        }
        <MudItem xs="12">
            <MudButton Variant="Variant.Filled" OnClick="StartRound">Aloita kierros</MudButton>
        </MudItem>
        <MudItem xs="12">
            @Game.RuleDescriptionShort
        </MudItem>

        @if (Game.Rounds.Count > 0)
        {
            <MudItem xs="12">
                <MudText>Yhteensä kierroksia: @Game.Rounds.Count</MudText>
            </MudItem>
            <MudItem xs="12">
                <MudText>Yhteensä oikeita vastauksia: @Game.Rounds.Count(x => x.IsCorrect == true)</MudText>
            </MudItem>
        }
    </MudGrid>
}
else
{
    <MudGrid Justify="Justify.Center">
        <MudItem xs="12">
            @{
                string value = GetValue();
                var proggressColor = Game.NumbersToSum == _activeRound.Numbers.Count() ? Color.Success : Color.Primary;

                <MudText Align="Align.Center" Typo="Typo.h1">
                    @value
                </MudText>
                <MudProgressLinear Color="@proggressColor" Striped="true" Size="Size.Large" Value="_activeRound.Numbers.Count()" Max="Game.NumbersToSum" Class="my-7"/>
            }
        </MudItem>

        <MudItem xs="12">
            <MudInput Disabled Value="_userInput" Label="Vastaus"/>
        </MudItem>

    </MudGrid>

    <MudGrid Justify="Justify.Center">

        @for (int i = 0; i <= 9; i++)
        {
            var capturedI = (i + 1) % 10;
            <MudItem xs="4">
                <MudButton Variant="Variant.Filled" OnClick="() => OnScreenKeyPress(capturedI)"> @capturedI</MudButton>

            </MudItem>
        }
    </MudGrid>
    <button @onclick="SubmitAnswer">Lähetä</button>
}

@code {
    [Parameter]
    public Game Game { get; set; }
    private Round? _activeRound;
    private string _userInput = string.Empty;
    private Random _random = new Random();

    private bool _numberFlashTime;

    private void SubmitAnswer()
    {
        if (int.TryParse(_userInput, out int userSum))
        {
            _activeRound.GiveAnswer(userSum);
            Game.AddRound(_activeRound);
        }
        else
        {
            _activeRound.GiveAnswer(-1);
            Game.AddRound(_activeRound);
        }

        _activeRound = null;
        _userInput = string.Empty;
    }

    private void OnScreenKeyPress(int number)
    {
        _userInput += number.ToString();
        if (_userInput.Length == Game.DigitsToShow)
        {
            SubmitAnswer();
        }
    }

    private async Task StartRound(MouseEventArgs obj)
    {
        _activeRound = new Round(Game);
        _userInput = string.Empty;

        while (_activeRound.Numbers.Count < Game.NumbersToSum)
        {
            // make number flash 
            _numberFlashTime = true;
            StateHasChanged();
            await Task.Delay(100);
            _numberFlashTime = false;
            StateHasChanged();


            int min = -_activeRound.TotalSum;

            int max = (int)Math.Pow(10, Game.DigitsToShow) - 1 - _activeRound.TotalSum;

            StateHasChanged(); // Refresh UI

            await Task.Delay(Game.DelayInMilliseconds);
            _activeRound.Numbers.Add(_random.Next(min, max));
        }

        _activeRound.LastNumberShownTime = DateTime.Now;
    }

    private string[] _englishNumbers = new string[] { "zero", "one", "two", "three", "four", "five", "six", "seven", "eight", "nine" };

    private string GetReturnValueFormat(int number)
    {
        if (Game.UseEnglishNumbers)
        {
            var abs = Math.Abs(number);
            if (number < 0)
            {
                return "minus " + _englishNumbers[abs];
            }
            else
            {
                return _englishNumbers[number];
            }
        }
        else
        {
            return number.ToString();
        }
    }

    private string GetValue()
    {
        if (_numberFlashTime)
        {
            return "+";
        }

        if (_activeRound.Numbers.Any())
        {
            return GetReturnValueFormat(_activeRound.Numbers.Last());
        }

        return "+";
    }

}