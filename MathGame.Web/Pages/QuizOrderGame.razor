@page "/quiz"
@using System.Text.Json.Serialization
@using MathGame.Web.Models.Quiz
@inject QuizService QuizService


<MudContainer Class="mt-16" MaxWidth="MaxWidth.Medium">

    @if (_gameFragment is not null)
    {
        @_gameFragment
    }
    else
    {
            
        <MudSelect T="QuizFileInfo" @bind-Value="_activeQuiz" Label="Select a Quiz" Variant="Variant.Outlined" Class="mb-4">
            @foreach (var quiz in Quizzes)
            {
                <MudSelectItem Value="@quiz">@quiz.title</MudSelectItem>
            }
        </MudSelect>
        <MudTextField T="string" Label="Quiz Type" Variant="Variant.Outlined" @bind-Value="@_playerNames" ReadOnly Class="mb-4"/>
        
        <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="() => StartGame()">
            Start Quiz
        </MudButton>
// Link to start spotify from this song: spotify:track:3ApNJsJf8qKCivGoJTeCrz
        @* <MudLink Href="https://open.spotify.com/track/3ApNJsJf8qKCivGoJTeCrz" Target="_blank" Class="mt-4"> *@
        @*     Listen to the quiz theme song *@
        @* </MudLink> *@
    }

</MudContainer>
@code {
    
    private QuizFileInfo? _activeQuiz;
    private RenderFragment? _gameFragment;
    private string _playerNames = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        Quizzes = await QuizService.LoadQuizzesAsync();
        await base.OnInitializedAsync();
    }

    public List<QuizFileInfo> Quizzes { get; set; } = new();

    public async Task StartGame()
    {
        switch (_activeQuiz.valueType.ToLowerInvariant())
        {
            case "int":
                var intQuiz = await QuizService.LoadQuizByFilenameAsync<int>(_activeQuiz.filename);
                var intGame = new QuizGame<int>(intQuiz);
                _gameFragment = builder =>
                {
                    builder.OpenComponent(0, typeof(RunQuizGame<int>));
                    builder.AddAttribute(1, "Game", intGame);
                    builder.CloseComponent();
                };
                break;

            case "date":
                var strQuiz = await QuizService.LoadQuizByFilenameAsync<DateOnly>(_activeQuiz.filename);
                var strGame = new QuizGame<DateOnly>(strQuiz);
                _gameFragment = builder =>
                {
                    builder.OpenComponent(0, typeof(RunQuizGame<DateOnly>));
                    builder.AddAttribute(1, "Game", strGame);
                    builder.CloseComponent();
                };
                break;

            default:
                // virheellinen tyyppi
                _gameFragment = builder =>
                {
                    builder.AddContent(0, $"Tuntematon tyyppi: {_activeQuiz.valueType}");
                };
                break;
        }
    }

}