@page "/"


<MudContainer Class="mt-16" MaxWidth="MaxWidth.Medium">

    @if (_activeGame != null)
    {
        if (_activeRound == null)
        {
            <MudGrid>
                @if (_activeGame.Rounds.Count > 0)
                {
                    var previousRound = _activeGame.Rounds.Last();
                    var prevAnswer = previousRound.IsCorrect ?? false ? "Oikein" : "Väärin";
                    <MudItem>

                        <MudText>Edellisen kierroksen vastaus oli @prevAnswer </MudText>
                        <MudText>Vastaukseen kului aikaa: @(previousRound.TimeTaken?.TotalMilliseconds / 1000)</MudText>

                        @if (previousRound.IsCorrect == false)
                        {
                            <MudText>Edellisen kierroksen oikea summa oli @previousRound.TotalSum </MudText>
                            <MudText>Edellisen kierroksen vastaus oli @previousRound.Answer </MudText>
                        }
                    </MudItem>
                }
                <MudItem xs="12">
                    <MudButton Variant="Variant.Filled" OnClick="StartRound">Aloita kierros</MudButton>
                </MudItem>
                <MudItem xs="12">
                    @_activeGame.RuleDescriptionShort
                </MudItem>

                @if (_activeGame.Rounds.Count > 0)
                {
                    <MudItem xs="12">
                        <MudText>Yhteensä kierroksia: @_activeGame.Rounds.Count</MudText>
                    </MudItem>
                    <MudItem xs="12">
                        <MudText>Yhteensä oikeita vastauksia: @_activeGame.Rounds.Count(x => x.IsCorrect == true)</MudText>
                    </MudItem>
                }
            </MudGrid>
        }
        else
        {
            <MudGrid Justify="Justify.Center">
                <MudItem xs="12">
                    @{
                        string value = GetValue(); 
                        var proggressColor = _activeGame.NumbersToSum == _activeRound.Numbers.Count() ? Color.Success : Color.Primary;

                        <MudText Align="Align.Center" Typo="Typo.h1">
                            @value
                        </MudText>
                        <MudProgressLinear Color="@proggressColor" Striped="true" Size="Size.Large" Value="_activeRound.Numbers.Count()" Max="_activeGame.NumbersToSum" Class="my-7"/>
                    }
                </MudItem>

                <MudItem xs="12">
                    <MudInput Disabled Value="_userInput" Label="Vastaus"/>
                </MudItem>

            </MudGrid>

            <MudGrid Justify="Justify.Center">

                @for (int i = 0; i <= 9; i++)
                {
                    var capturedI = (i + 1) % 10;
                    <MudItem xs="4">
                        <MudButton Variant="Variant.Filled" OnClick="() => OnScreenKeyPress(capturedI)"> @capturedI</MudButton>

                    </MudItem>
                }
            </MudGrid>
            <button @onclick="SubmitAnswer">Lähetä</button>
        }
    }
    else
    {
            <SelectGame StartGameCalled="StartGame" />

    }

</MudContainer>

@code {

    private string _userInput = string.Empty;
    private Random _random = new Random();


    private Game? _activeGame;
    private Round? _activeRound;
    private bool _numberFlashTime;

    private async Task StartGame(GameSettings gameSettings)
    {
        _activeGame = new Game(gameSettings);
    }
    

    private void SubmitAnswer()
    {
        if (int.TryParse(_userInput, out int userSum))
        {
            _activeRound.GiveAnswer(userSum);
            _activeGame.AddRound(_activeRound);
        }
        else
        {
            _activeRound.GiveAnswer(-1);
            _activeGame.AddRound(_activeRound);
        }

        _activeRound = null;
        _userInput = string.Empty;
    }

    private void OnScreenKeyPress(int number)
    {
        _userInput += number.ToString();
        if (_userInput.Length == _activeGame.DigitsToShow)
        {
            SubmitAnswer();
        }
    }

    private async Task StartRound(MouseEventArgs obj)
    {
        _activeRound = new Round(_activeGame);
        _userInput = string.Empty;

        while (_activeRound.Numbers.Count < _activeGame.NumbersToSum)
        {
            // make number flash 
            _numberFlashTime = true;
            StateHasChanged();
            await Task.Delay(100);
            _numberFlashTime = false;
            StateHasChanged();


            int min = -_activeRound.TotalSum;

            int max = (int)Math.Pow(10, _activeGame.DigitsToShow) - 1 - _activeRound.TotalSum;

            StateHasChanged(); // Refresh UI

            await Task.Delay(_activeGame.DelayInMilliseconds);
            _activeRound.Numbers.Add(_random.Next(min, max));
        }

        _activeRound.LastNumberShownTime = DateTime.Now;
    }
    
    

    private string GetValue()
    {
        if (_numberFlashTime)
        {
            return "+";
        }
        
        if(_activeRound.Numbers.Any())
        {
            return GetReturnValueFormat(_activeRound.Numbers.Last());
        }

        return "+";
        
    }
    
    private string[] _englishNumbers = new string[] { "zero", "one", "two", "three", "four", "five", "six", "seven", "eight", "nine" };

    private string GetReturnValueFormat(int number)
    {
        if (_activeGame.UseEnglishNumbers)
        {
            var abs = Math.Abs(number);
            if(number < 0)
            {
                return "minus " + _englishNumbers[abs];
            }
            else
            {
                return _englishNumbers[number];
            }
        }
        else
        {
            return number.ToString();
            
        }
    }

}

