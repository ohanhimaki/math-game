@page "/"


<MudContainer Class="mt-16" MaxWidth="MaxWidth.Medium">
    
@if (_activeGame != null)
{
    if (_activeRound == null)
    {
        <MudGrid>
            @if(_activeGame.Rounds.Count > 0)
            {
                
                var previousRound = _activeGame.Rounds.Last();
                var prevAnswer = previousRound.IsCorrect?? false ? "Oikein" : "Väärin";
                <MudItem>
                    
                    <MudText>Edellisen kierroksen vastaus oli @prevAnswer  </MudText>
                    <MudText>Vastaukseen kului aikaa: @(previousRound.TimeTaken?.TotalMilliseconds/1000)</MudText>
                    
                    @if (previousRound.IsCorrect == false)
                    {
                        <MudText>Edellisen kierroksen oikea  summa oli @previousRound.TotalSum  </MudText>
                        <MudText>Edellisen kierroksen vastaus oli @previousRound.Answer  </MudText>
                    }
                </MudItem>
                
            }
            <MudItem xs="12">
                <MudButton Variant="Variant.Filled" OnClick="StartRound">Aloita kierros</MudButton>
            </MudItem>
            <MudItem xs="12">
                @_activeGame.RuleDescriptionShort
            </MudItem>
            
            @if(_activeGame.Rounds.Count > 0)
            {
                <MudItem xs="12">
                    <MudText>Yhteensä kierroksia: @_activeGame.Rounds.Count</MudText>
                </MudItem>
                <MudItem xs="12">
                    <MudText>Yhteensä oikeita vastauksia: @_activeGame.Rounds.Count(x => x.IsCorrect == true)</MudText>
                </MudItem>
            }
        </MudGrid>
        
        
        
    }
    else
    {
        <MudGrid Justify="Justify.Center">
            <MudItem xs="12" >
                <MudText Align="Align.Center" Typo="Typo.h1">@(_activeRound.Numbers.Any() ? _activeRound.Numbers.Last() : "")</MudText>
                <MudProgressLinear Color="Color.Primary" Striped="true" Size="Size.Large" Value="_activeRound.Numbers.Count()" Max="_activeGame.NumbersToSum"  Class="my-7" />
            </MudItem>
            
            <MudItem xs="12">
                <MudInput Disabled Value="_userInput" Label="Vastaus" />
            </MudItem>

        </MudGrid>

        <MudGrid Justify="Justify.Center">

            @for (int i = 0; i <= 9; i++)
            {
                var capturedI = (i + 1) % 10;
                <MudItem xs="4">
                    <MudButton Variant="Variant.Filled" OnClick="() => OnScreenKeyPress(capturedI)"> @capturedI</MudButton>

                </MudItem>
            }
        </MudGrid>
        <button @onclick="SubmitAnswer">Lähetä</button>
    }
}
else
{
    <h3>Welcome to the Math Game!</h3>
    <SelectGame GameSettings="@_gameSettings"/>

    <button @onclick="StartGame">Aloita peli</button>
}

</MudContainer>

@code {

    private string _userInput = string.Empty;
    private Random _random = new Random();

    private GameSettings _gameSettings { get; set; } = new GameSettings();

    private Game? _activeGame;
    private Round? _activeRound;

    private async Task StartGame()
    {
        _activeGame = new Game(_gameSettings);
    }

    private void SubmitAnswer()
    {
        if (int.TryParse(_userInput, out int userSum) )
        {
            _activeRound.GiveAnswer(userSum);
            _activeGame.AddRound(_activeRound);
        }
        else
        {
            _activeRound.GiveAnswer(-1);
            _activeGame.AddRound(_activeRound);
        }
        _activeRound = null;
        _userInput = string.Empty;
        
        
    }

    private void OnScreenKeyPress(int number)
    {
        _userInput += number.ToString();
        if (_userInput.Length == _activeGame.DigitsToShow)
        {
            SubmitAnswer();
        }
    }

    private async Task StartRound(MouseEventArgs obj)
    {
        _activeRound = new Round(_activeGame);
        _userInput = string.Empty;

        while (_activeRound.Numbers.Count < _activeGame.NumbersToSum)
        {
            int min = -_activeRound.TotalSum;

            int max = (int)Math.Pow(10, _activeGame.DigitsToShow) - 1 -  _activeRound.TotalSum;

            StateHasChanged(); // Refresh UI

            await Task.Delay(_activeGame.DelayInMilliseconds);
            _activeRound.Numbers.Add(_random.Next(min, max));
        }
        _activeRound.LastNumberShownTime = DateTime.Now;

    }

}